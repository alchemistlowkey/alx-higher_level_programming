=====================================================================
'Test for 1-my_list'
=====================================================================
=====================================================================
'Function to test: print_sorted(self)'
=====================================================================

>>> MyList = __import__("1-my_list").MyList

'class docstring'
>>> cls = __import__("1-my_list").MyList.__doc__
>>> len(cls) > 2
True

'module docstring'
>>> mod = __import__("1-my_list").__doc__
>>> len(mod) > 5
True

'method docstring'
>>> met = __import__("1-my_list").MyList.print_sorted.__doc__
>>> len(met) > 1
True

'An empty list'
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

'An integer list'
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.print_sorted()
[1, 2, 3]

'A character list'
>>> my_list = MyList()
>>> my_list.append('L')
>>> my_list.append('X')
>>> my_list.append('A')
>>> my_list.print_sorted()
['A', 'L', 'X']

'A string list'
>>> my_list = MyList()
>>> my_list.append('Software')
>>> my_list.append('ALX')
>>> my_list.append('Python')
>>> my_list.append('C Lang')
>>> my_list.print_sorted()
['ALX', 'C Lang', 'Python', 'Software']

'A boolean list'
>>> my_list = MyList()
>>> my_list.append(True)
>>> my_list.append(False)
>>> my_list.append(True)
>>> my_list.append(False)
>>> my_list.append(True)
>>> my_list.print_sorted()
[False, False, True, True, True]

'A list of lists'
>>> my_list = MyList()
>>> my_list.append([10, 9, 8])
>>> my_list.append([1, 2, 3])
>>> my_list.append([4, 5, 6, 7])
>>> my_list.print_sorted()
[[1, 2, 3], [4, 5, 6, 7], [10, 9, 8]]

'A tuples list'
>>> my_list = MyList()
>>> my_list.append((10, 20, 30))
>>> my_list.append((1, 2, 3))
>>> my_list.append((5, 6, 7))
>>> my_list.print_sorted()
[(1, 2, 3), (5, 6, 7), (10, 20, 30)]

'A list elements of different type'
>>> my_list = MyList()
>>> my_list.append((5, 6, 7))    
>>> my_list.append(True)      
>>> my_list.append('ALX') 
>>> my_list.append(9)
>>> my_list.print_sorted()
Traceback (most recent call last):
...
TypeError: '<' not supported between instances of 'bool' and 'tuple'

'One argumet in print_sorted'
>>> my_list = MyList()
>>> my_list.print_sorted(9)
Traceback (most recent call last):
...
TypeError: print_sorted() takes 1 positional argument but 2 were given
