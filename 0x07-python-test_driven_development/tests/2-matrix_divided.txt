========================================================================
'Test for 2-matrix_divided'
========================================================================
'Function to test: matrix_divided(matrix, div)'
========================================================================

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

'positive integer values'
>>> matrix_divided([[8, 4, -1], [4, 1, 8], [1, 2, 3]], 2)
[[4.0, 2.0, -0.5], [2.0, 0.5, 4.0], [0.5, 1.0, 1.5]]

'div is a negative integer value'
>>> matrix_divided([[8, 4, -1], [4, 1, 8], [1, 2, 3]], -2)
[[-4.0, -2.0, 0.5], [-2.0, -0.5, -4.0], [-0.5, -1.0, -1.5]]

'positive and negative floating values'
>>> matrix_divided([[9.4, 3.6, -1.2], [4.0, 1.6, 8], [1, 2, 3]], 2.0)
[[4.7, 1.8, -0.6], [2.0, 0.8, 4.0], [0.5, 1.0, 1.5]]

'matrix is an empty list'
>>> matrix_divided([], 3)
[]

'div is a string'
>>> matrix_divided([[10, 9, -8], [7, -6, 5], [-4, 3, 2]], "ALX")
Traceback (most recent call last):
...
TypeError: div must be a number

'matrix is a string'
>>> matrix_divided("ALX", 5)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'matrix is a bool'
>>> matrix_divided(False, 7)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'matrix is a tuple'
>>> matrix_divided((5, 4), 6)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'matrix is a dict'
>>> matrix_divided({9, 8, 7, 6, 5, 4, 3}, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'div is a bool'
>>> matrix_divided([[9, 8, 7], [4, -4, 8], [1, 5, 2]], True)
Traceback (most recent call last):
...
TypeError: div must be a number

'div is a tuple'
>>> matrix_divided([[9, 3, -7], [4, 4, 8], [5, 2, 4]], (6, 2))
Traceback (most recent call last):
...
TypeError: div must be a number

'div is a list'
>>> matrix_divided([[9, -8, 1], [4, 4, 8], [1, 5, 3]], [6, 4])
Traceback (most recent call last):
...
TypeError: div must be a number

'div is an empty list'
>>> matrix_divided(5, [])
Traceback (most recent call last):
...
TypeError: div must be a number

'div is a dict'
>>> matrix_divided([[9, 8, 2], [4, 6, 8], [5, 2, 3]], {2})
Traceback (most recent call last):
...
TypeError: div must be a number

'matrix have an infinity float'
>>> import sys
>>> matrix_divided([[9, -8, 7], [4, 3, 8], [6, sys.float_info.max + 1e293, 5]], 5)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'div is an infinity float'
>>> import sys
>>> matrix_divided([[2, 3, 8], [4, -5, 1], [7, 2, 3]], sys.float_info.max + 1e300)
Traceback (most recent call last):
...
TypeError: div must be a number

'matrix have a nan'
>>> matrix_divided([[1, 3, 5], [-7, 9, 2], [4, 6, float('nan')]], 5)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'div is nan'
>>> matrix_divided([[9, 3, -2], [4, 1, 8], [1, 5, 3]], float('nan'))
Traceback (most recent call last):
...
TypeError: div must be a number

'matrix have an inf'
>>> matrix_divided([[9, 3, -1], [4, float('inf'), 8], [1, 2, 3]], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'div is inf'
>>> matrix_divided([[9, 3, -1], [4, 1, 8], [1, 2, 3]], float('inf'))
Traceback (most recent call last):
...
TypeError: div must be a number

'Rows in matrix doesn't have the same length'
>>> matrix_divided([[2, 3, 5, 7], [1, 2]], 5)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

'div is having more than 1 argument'
>>> matrix_divided([[9, 8, 7], [1, 2, 3]], 5, 2)
Traceback (most recent call last):
...
TypeError: matrix_divided() takes 2 positional arguments but 3 were given
